@page "/"
@using BlazorSchool.Components.Web.UI
@using BlazorSchool.Components.Web.Variants
@using System.IO
@using System.Text.Json
@using Microsoft.AspNetCore.Hosting
@inject IWebHostEnvironment Environment
@using Microsoft.JSInterop;
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Forms</PageTitle>

<BlazorLibrary>
    <div class="positioning">
        <div class="main-page">
            <BlazorCaptureElement Token="Form" class="flex-fill">
                <div class="header">
                    @if (editMode)
                    {
                        <div draggable="true"
                             @ondragend="OnDragLogoEnd" @ondragstart="OnDragLogoStart"
                             style="position:absolute; top: @(logoOffsetY)px; left: @(logoOffsetX)px; border-color: black;">
                            <div>
                                <img src="/logo_uj.png" alt="placeholder"/>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div style="position:absolute; top: @(logoOffsetY)px; left: @(logoOffsetX)px; border-color: black;">
                            <img src="/logo_uj.png" alt="placeholder"/>
                        </div>
                    }

                    @if (editMode)
                    {
                        <div draggable="true"
                             @ondragend="OnDragRoomNumberEnd" @ondragstart="OnDragRoomNumberStart"
                             style="position:absolute; top: @(roomNumberOffsetY)px; left: @(roomNumberOffsetX)px; border-color: black;">
                            <div>
                                <textarea style="font-family: @roomNumberFont; font-size:@roomNumberFontSizeStr" class="roomNumber"
                                                            rows="1" cols="20" @bind="@roomNumber"></textarea>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div style="position:absolute; top: @(roomNumberOffsetY)px; left: @(roomNumberOffsetX)px; border-color: black;">
                            <p style="font-family: @roomNumberFont; font-size:@roomNumberFontSizeStr" class="roomNumber">
                                @roomNumber
                            </p>
                        </div>
                    }
                </div>


                @if (editMode)
                {
                    <div draggable="true"
                         @ondragend="OnDragNamesEnd" @ondragstart="OnDragNamesStart"
                         style="position:absolute; top: @(namesOffsetY)px; left: @(namesOffsetX)px; border-color: black;">
                        <div>
                            <textarea style="font-family: @namesFont; font-size:@namesFontSizeStr" class="names" rows="4" cols="35"
                                                    @bind="@names"></textarea>
                        </div>
                    </div>
                }
                else
                {
                    <div style="position:absolute; top: @(namesOffsetY)px; left: @(namesOffsetX)px; border-color: black;">
                        @foreach (var name in names.Split('\n'))
                        {
                            <p style="font-family: @namesFont; font-size:@namesFontSizeStr" class="names">@name</p>
                        }
                    </div>
                }


            </BlazorCaptureElement>
        </div>

        <div class="grid">

            <Button Color="ButtonColor.Primary" Size="Size.Large" @onclick="OnShowRoomNumberClick"> Numer sali </Button>
            <Button Color="ButtonColor.Primary" Size="Size.Large" @onclick="OnShowNamesClick"> Nazwiska </Button>
            <Button Color="ButtonColor.Primary" Size="Size.Large" @onclick="OnShowLoadClick"> Wczytaj </Button>
            <Button Color="ButtonColor.Primary" Size="Size.Large" @onclick="@(() => { editMode = true; })">
                Edytuj
            </Button>
            <Button Color="ButtonColor.Primary" Size="Size.Large" @onclick="SaveAsJson"> Zapisz do JSONA </Button>

            @if (editMode)
            {
                <Button Color="ButtonColor.Primary" Size="Size.Large" @onclick="@(() => { editMode = false; })">
                    Zapisz
                    zmiany
                </Button>
            }
            else
            {
                <BlazorCapturePdfButton Variants="new[] { BaseVariants.Primary }" TargetToken="Form">
                    Zapisz do PDF
                </BlazorCapturePdfButton>
            }


        </div>
    </div>

</BlazorLibrary>

<Modal @ref="RoomNumber" title="Numer sali" IsVerticallyCentered="true">
    <BodyTemplate>
        <Button Color="ButtonColor.Primary" Size="Size.ExtraLarge"
                @onclick="@(async () => ChangeRoomNumberFont("Caveat"))">
            Caveat Font
        </Button>
        <Button Color="ButtonColor.Primary" Size="Size.ExtraLarge"
                @onclick="@(async () => ChangeRoomNumberFont("Oswald"))">
            Oswald Font
        </Button>
        <Button Color="ButtonColor.Primary" Size="Size.ExtraLarge"
                @onclick="@(async () => ChangeRoomNumberFont("Montserrat"))">
            Montserrat Font
        </Button>
        <Button Color="ButtonColor.Primary" Size="Size.ExtraLarge"
                @onclick="@(async () => ChangeRoomNumberFont("Helvetica Neue"))">
            Default
        </Button>
        <Button Color="ButtonColor.Primary" Size="Size.ExtraLarge" style="margin-top:4px"
                @onclick="@(async () => IncrementRoomNumberFont())">
            Font
            +
        </Button>
        <Button Color="ButtonColor.Primary" Size="Size.ExtraLarge" style="margin-top:4px"
                @onclick="@(async () => DecrementRoomNumberFont())">
            Font
            -
        </Button>
    </BodyTemplate>
    <FooterTemplate>
    </FooterTemplate>
</Modal>

<Modal @ref="Names" title="Nazwiska" IsVerticallyCentered="true">
    <BodyTemplate>
        <Button Color="ButtonColor.Primary" Size="Size.ExtraLarge"
                @onclick="@(async () => ChangeNamesFont("Caveat"))">
            Caveat Font
        </Button>
        <Button Color="ButtonColor.Primary" Size="Size.ExtraLarge"
                @onclick="@(async () => ChangeNamesFont("Oswald"))">
            Oswald Font
        </Button>
        <Button Color="ButtonColor.Primary" Size="Size.ExtraLarge"
                @onclick="@(async () => ChangeNamesFont("Montserrat"))">
            Montserrat Font
        </Button>
        <Button Color="ButtonColor.Primary" Size="Size.ExtraLarge"
                @onclick="@(async () => ChangeNamesFont("Helvetica Neue"))">
            Default
        </Button>
        <Button Color="ButtonColor.Primary" Size="Size.ExtraLarge" style="margin-top:4px"
                @onclick="@(async () => IncrementNamesFont())">
            Font
            +
        </Button>
        <Button Color="ButtonColor.Primary" Size="Size.ExtraLarge" style="margin-top:4px"
                @onclick="@(async () => DecrementNamesFont())">
            Font
            -
        </Button>
    </BodyTemplate>
    <FooterTemplate>
    </FooterTemplate>
</Modal>

<Modal @ref="Load" title="Wczytaj" IsVerticallyCentered="true">
    <BodyTemplate>
        <InputFile OnChange="@LoadFiles" multiple/>
    </BodyTemplate>
    <FooterTemplate>
    </FooterTemplate>
</Modal>

@code {
    private Modal RoomNumber = default!;
    private Modal Names = default!;
    private Modal Load = default!;
    private string roomNumber;
    private ElementReference Img;
    private IBrowserFile loadedFile;
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool isLoading;
    private string names = "";
    private bool editMode = false;
    private string roomNumberFont;
    private string namesFont;
    private int roomNumberFontSize = 75;
    private int namesFontSize = 75;
    private string roomNumberFontSizeStr = "75px";
    private string namesFontSizeStr = "75px";

    private Info info;


    private double logoStartX, logoStartY, logoOffsetX = 100, logoOffsetY = 100;
    private double roomNumberStartX, roomNumberStartY, roomNumberOffsetX = 400, roomNumberOffsetY = 100;
    private double namesStartX, namesStartY, namesOffsetX = 0, namesOffsetY = 500;

    private void OnDragLogoStart(DragEventArgs args)
    {
        logoStartX = args.ClientX;
        logoStartY = args.ClientY;
    }

    private void OnDragLogoEnd(DragEventArgs args)
    {
        logoOffsetX += args.ClientX - logoStartX;
        logoOffsetY += args.ClientY - logoStartY;
        Console.WriteLine(logoOffsetX);
        Console.WriteLine(logoOffsetY);
    }

    private void OnDragRoomNumberStart(DragEventArgs args)
    {
        roomNumberStartX = args.ClientX;
        roomNumberStartY = args.ClientY;
    }

    private void OnDragRoomNumberEnd(DragEventArgs args)
    {
        roomNumberOffsetX += args.ClientX - roomNumberStartX;
        roomNumberOffsetY += args.ClientY - roomNumberStartY;
        Console.WriteLine(roomNumberOffsetX);
        Console.WriteLine(roomNumberOffsetY);
    }

    private void OnDragNamesStart(DragEventArgs args)
    {
        namesStartX = args.ClientX;
        namesStartY = args.ClientY;
    }

    private void OnDragNamesEnd(DragEventArgs args)
    {
        namesOffsetX += args.ClientX - namesStartX;
        namesOffsetY += args.ClientY - namesStartY;
        Console.WriteLine(namesOffsetX);
        Console.WriteLine(namesOffsetY);
    }


    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        loadedFile = e.File;

        using (var stream = loadedFile.OpenReadStream())
        {
            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

            info = await JsonSerializer.DeserializeAsync<Info>(stream, options);
            names = info.Names;
            roomNumber = info.RoomNumber;
        }
    }

    private void ChangeRoomNumberFont(string font)
    {
        roomNumberFont = font;
        StateHasChanged();
    }

    private void ChangeNamesFont(string font)
    {
        namesFont = font;
        StateHasChanged();
    }

    private void IncrementRoomNumberFont()
    {
        roomNumberFontSize++;
        roomNumberFontSizeStr = roomNumberFontSize.ToString() + "px";
        StateHasChanged();
    }

    private void DecrementRoomNumberFont()
    {
        roomNumberFontSize--;
        roomNumberFontSizeStr = roomNumberFontSize.ToString() + "px";
        StateHasChanged();
    }

    private void IncrementNamesFont()
    {
        namesFontSize++;
        namesFontSizeStr = namesFontSize.ToString() + "px";
        StateHasChanged();
    }

    private void DecrementNamesFont()
    {
        namesFontSize--;
        namesFontSizeStr = namesFontSize.ToString() + "px";
        StateHasChanged();
    }

    private async Task SaveAsJson()
    {
        Info data = new Info();
        data.RoomNumber = roomNumber;
        data.Names = names;
        var json = System.Text.Json.JsonSerializer.Serialize(data);

        var jsRuntime = JS;

        await jsRuntime.InvokeVoidAsync("saveAsFile", "data.json", json, "application/json");
    }

    private async Task OnShowRoomNumberClick()
    {
        await RoomNumber.ShowAsync();
    }

    private async Task OnShowNamesClick()
    {
        await Names.ShowAsync();
    }

    private async Task OnShowLoadClick()
    {
        await Load.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await RoomNumber.HideAsync();
        await Names.HideAsync();
        await Load.HideAsync();
    }

}