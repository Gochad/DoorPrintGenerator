@page "/"
@using BlazorSchool.Components.Web.UI
@using BlazorSchool.Components.Web.Variants
@using System.IO
@using Microsoft.AspNetCore.Hosting
@inject IWebHostEnvironment Environment
@rendermode InteractiveServer

<PageTitle>Forms</PageTitle>

<BlazorLibrary>
    <div class="positioning">
        <BlazorCaptureElement class="card">
                <div class="header">
                    <img src="/logo_uj.png" alt="placeholder"/>
                    <p class="roomNumber">@roomNumber</p>
                </div>
                <p class="names">@surnames</p>
                <BlazorCapturePdfButton Variants="new[] { BaseVariants.Primary }">Zapisz do PDF</BlazorCapturePdfButton>
            </BlazorCaptureElement>
        <BlazorForm class="grid">
            <div class="field">
                <label>Numer sali</label>
                <input type="text" @bind="roomNumber"/>
            </div>
            <div class="field">
                <label>Nazwiska</label>
                <input type="text" @bind="surnames"/>
            </div>
            <div class="buttons">
                <BlazorButton type="submit" class="btn btn-primary">Zapisz</BlazorButton>
                <BlazorButton type="submit" class="btn btn-primary">Wczytaj</BlazorButton>
            </div>
            <label>
                    <InputFile OnChange="@LoadFiles" multiple />
                </label>
        </BlazorForm>
    </div>
</BlazorLibrary>
@code {
    private string textInput;
    private string surnames;
    private string roomNumber;
    
    private ElementReference Img;
    
    
    private IBrowserFile loadedFile;
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool isLoading;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                var trustedFileName = Path.GetRandomFileName();
                var path = Path.Combine(Environment.ContentRootPath,
                    Environment.EnvironmentName, "unsafe_uploads",
                    trustedFileName);

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                
                loadedFile = file;
            }
            catch (Exception ex){}
        }

        isLoading = false;
    }
}

